{"version":3,"sources":["webpack:///src/views/workStudy/vuex/core/module/index.vue","webpack:///./src/views/workStudy/vuex/core/module/index.vue?cb44","webpack:///./src/views/workStudy/vuex/core/module/index.vue"],"names":["core_module","vuex_core_module","render","this","$createElement","_self","_c","_m","staticRenderFns","_vm","_h","staticClass","_v","Component","__webpack_require__","normalizeComponent","__webpack_exports__"],"mappings":"0GA6EAA,QAEA,qCACA,IC7EAC,GADiBC,OAFjB,WAA0BC,KAAaC,eAAbD,KAAuCE,MAAAC,GAAwB,OAA/DH,KAA+DI,GAAA,IAExEC,iBADjB,WAAoC,IAAAC,EAAAN,KAAaO,EAAAD,EAAAL,eAA0BE,EAAAG,EAAAJ,MAAAC,IAAAI,EAAwB,OAAAJ,EAAA,OAAiBK,YAAA,uBAAiCL,EAAA,KAAUK,YAAA,UAAoBF,EAAAG,GAAA,uJAAAH,EAAAG,GAAA,KAAAN,EAAA,OAAsLK,YAAA,iBAA2BF,EAAAG,GAAA,QAAAN,EAAA,QAA4BK,YAAA,gBAA0BF,EAAAG,GAAA,2dAAwYH,EAAAG,GAAA,UAAAH,EAAAG,GAAA,KAAAN,EAAA,KAAiIK,YAAA,WAAqBF,EAAAG,GAAA,uBAAAH,EAAAG,GAAA,KAAAN,EAAA,KAAoDK,YAAA,UAAoBF,EAAAG,GAAA,2CAAAN,EAAA,KAAAG,EAAAG,GAAA,yBAAAH,EAAAG,GAAA,KAAAN,EAAA,KAAgHK,YAAA,UAAoBF,EAAAG,GAAA,8EAAAH,EAAAG,GAAA,KAAAN,EAAA,OAA6GK,YAAA,iBAA2BF,EAAAG,GAAA,QAAAN,EAAA,QAA4BK,YAAA,gBAA0BF,EAAAG,GAAA,8RAA4RH,EAAAG,GAAA,UAAAH,EAAAG,GAAA,KAAAN,EAAA,KAAgDK,YAAA,UAAoBF,EAAAG,GAAA,gDAAAH,EAAAG,GAAA,KAAAN,EAAA,OAA+EK,YAAA,iBAA2BF,EAAAG,GAAA,QAAAN,EAAA,QAA4BK,YAAA,gBAA0BF,EAAAG,GAAA,sNAAoNH,EAAAG,GAAA,UAAAH,EAAAG,GAAA,KAAAN,EAAA,KAAgDK,YAAA,YAAsBL,EAAA,KAAAG,EAAAG,GAAA,UAAAH,EAAAG,GAAA,qBCa5nEC,EAdAC,EAAA,OAcAC,CACAf,EACAC,GATA,EAEA,KAEA,KAEA,MAUAe,EAAA,QAAAH,EAAA","file":"static/js/13.b5f9545fc12cb03e12af.js","sourcesContent":["<template>\n  <div class=\"v-vuex-core-module\">\n    <p class=\"v-txt\">\n      由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store对象就有可能变得相当臃肿。所以，我们可以使用module将store分割成多个模块。每个模块拥有自己的state，mutation，getter，action，甚至是嵌套子模块。\n    </p>\n    <pre class=\"line-numbers\">\n      <code class=\"language-js\">\n        const moduleA = {\n          state: { ... },\n          mutations: { ... },\n          actions: { ... },\n          getters: { ... }\n        }\n\n        const moduleB = {\n          state: { ... },\n          mutations: { ... },\n          actions: { ... }\n        }\n\n        const store = new Vuex.Store({\n          modules: {\n            a: moduleA,\n            b: moduleB\n          }\n        })\n\n        store.state.a // -> moduleA 的状态\n        store.state.b // -> moduleB 的状态\n      </code>\n    </pre>\n    <p class=\"v-note\">\n      模块的局部状态\n    </p>\n    <p class=\"v-txt\">\n      对于模块内部的mutation和getter，接收的第一个参数，是<b>模块的局部状态对象（state）。</b>\n    </p>\n    <p class=\"v-txt\">\n      对于模块内部的action，局部状态通过context.state暴露出来，根节点状态则为context.rootState\n    </p>\n    <pre class=\"line-numbers\">\n      <code class=\"language-js\">\n        const moduleA = {\n          // ...\n          actions: {\n            incrementIfOddOnRootSum ({ state, commit, rootState }) {\n              if ((state.count + rootState.count) % 2 === 1) {\n                commit('increment')\n              }\n            }\n          }\n        }\n      </code>\n    </pre>\n    <p class=\"v-txt\">\n      对于模块内部的getter，根节点状态会作为第三个参数暴露出来。\n    </p>\n    <pre class=\"line-numbers\">\n      <code class=\"language-js\">\n        const moduleA = {\n          // ...\n          getters: {\n            sumWithRootCount (state, getters, rootState) {\n              return state.count + rootState.count\n            }\n          }\n        }\n      </code>\n    </pre>\n    <p class=\"v-title\">\n      <b>命名空间</b>待更新...\n    </p>\n  </div>\n</template>\n\n<script>\n  import mixin from '@/mixins/prism';\n  export default {\n    name: 'vuex-core-moudle',\n    mixins: [mixin]\n  }\n</script>\n\n\n\n// WEBPACK FOOTER //\n// src/views/workStudy/vuex/core/module/index.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"v-vuex-core-module\"},[_c('p',{staticClass:\"v-txt\"},[_vm._v(\"\\n    由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store对象就有可能变得相当臃肿。所以，我们可以使用module将store分割成多个模块。每个模块拥有自己的state，mutation，getter，action，甚至是嵌套子模块。\\n  \")]),_vm._v(\" \"),_c('pre',{staticClass:\"line-numbers\"},[_vm._v(\"    \"),_c('code',{staticClass:\"language-js\"},[_vm._v(\"\\n      const moduleA = {\\n        state: { ... },\\n        mutations: { ... },\\n        actions: { ... },\\n        getters: { ... }\\n      }\\n\\n      const moduleB = {\\n        state: { ... },\\n        mutations: { ... },\\n        actions: { ... }\\n      }\\n\\n      const store = new Vuex.Store({\\n        modules: {\\n          a: moduleA,\\n          b: moduleB\\n        }\\n      })\\n\\n      store.state.a // -> moduleA 的状态\\n      store.state.b // -> moduleB 的状态\\n    \")]),_vm._v(\"\\n  \")]),_vm._v(\" \"),_c('p',{staticClass:\"v-note\"},[_vm._v(\"\\n    模块的局部状态\\n  \")]),_vm._v(\" \"),_c('p',{staticClass:\"v-txt\"},[_vm._v(\"\\n    对于模块内部的mutation和getter，接收的第一个参数，是\"),_c('b',[_vm._v(\"模块的局部状态对象（state）。\")])]),_vm._v(\" \"),_c('p',{staticClass:\"v-txt\"},[_vm._v(\"\\n    对于模块内部的action，局部状态通过context.state暴露出来，根节点状态则为context.rootState\\n  \")]),_vm._v(\" \"),_c('pre',{staticClass:\"line-numbers\"},[_vm._v(\"    \"),_c('code',{staticClass:\"language-js\"},[_vm._v(\"\\n      const moduleA = {\\n        // ...\\n        actions: {\\n          incrementIfOddOnRootSum ({ state, commit, rootState }) {\\n            if ((state.count + rootState.count) % 2 === 1) {\\n              commit('increment')\\n            }\\n          }\\n        }\\n      }\\n    \")]),_vm._v(\"\\n  \")]),_vm._v(\" \"),_c('p',{staticClass:\"v-txt\"},[_vm._v(\"\\n    对于模块内部的getter，根节点状态会作为第三个参数暴露出来。\\n  \")]),_vm._v(\" \"),_c('pre',{staticClass:\"line-numbers\"},[_vm._v(\"    \"),_c('code',{staticClass:\"language-js\"},[_vm._v(\"\\n      const moduleA = {\\n        // ...\\n        getters: {\\n          sumWithRootCount (state, getters, rootState) {\\n            return state.count + rootState.count\\n          }\\n        }\\n      }\\n    \")]),_vm._v(\"\\n  \")]),_vm._v(\" \"),_c('p',{staticClass:\"v-title\"},[_c('b',[_vm._v(\"命名空间\")]),_vm._v(\"待更新...\\n  \")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-0cc52071\",\"hasScoped\":false,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/workStudy/vuex/core/module/index.vue\n// module id = null\n// module chunks = ","var normalizeComponent = require(\"!../../../../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./index.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./index.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-0cc52071\\\",\\\"hasScoped\\\":false,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../../../../node_modules/vue-loader/lib/selector?type=template&index=0!./index.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/workStudy/vuex/core/module/index.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}