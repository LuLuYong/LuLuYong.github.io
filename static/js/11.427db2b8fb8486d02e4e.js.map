{"version":3,"sources":["webpack:///src/views/workStudy/vuex/core/state/index.vue","webpack:///./src/views/workStudy/vuex/core/state/index.vue?cba6","webpack:///./src/views/workStudy/vuex/core/state/index.vue"],"names":["state","prism","computed","extends_default","localCount","status","core_state","render","this","$createElement","_self","_c","_m","staticRenderFns","_vm","_h","staticClass","_v","Component","__webpack_require__","normalizeComponent","__webpack_exports__"],"mappings":"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","file":"static/js/11.427db2b8fb8486d02e4e.js","sourcesContent":["<template>\n  <div class=\"v-vuex-core-state\">\n    <p class=\"v-note\">单一状态树</p>\n    <p class=\"v-txt\">\n      单一状态树即用一个对象就包含了全部的应用层级状态。所以，这个对象就作为整个应用里唯一的数据源而存在。其意义就是每个应用实例仅有一个store实例。单一状态树让我们能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照。<b>单状态树和模块化并不冲突。</b>\n    </p>\n    <p class=\"v-note\">\n      获得vuex状态\n    </p>\n    <p class=\"v-title\">\n      在vue-cli项目中，我们可以通过如下方式将vuex状态从根组件注入到每一个子组件中（通过vue的store选项），这样子组件就能通过this.$store来访问到store状态。代码如下：\n    </p>\n    <pre class=\"line-numbers\">\n      <code class=\"language-js\">\n        // 在上一节，已经在src目录下新建了store文件夹以及store文件夹下的一个js文件，js文件先命名为index.js文件，其内容如下\n        import Vue from 'vue'\n        import Vuex from 'vuex'\n        Vue.use(Vuex)\n        const store = new Vuex.Store({\n          state: {\n            count: 0\n          },\n          mutations: {\n            increment(state) {\n              state.count++\n            }\n          }\n        })\n        export default store\n      </code>\n    </pre>\n    <p class=\"v-txt\">\n      访问store状态代码如下：\n    </p>\n    <pre class=\"line-numbers\">\n      <code class=\"language-js\">\n        created() {\n          console.log(this.$store.count) // => 0\n        }\n      </code>\n    </pre>\n    <p class=\"v-title\">\n      如果每次从vuex中取状态都以this.$store的方式取的话，无疑是很麻烦的。因为vuex的状态存储是响应式的，所以从stroe中读取状态最简单的方法就是在计算属性中返回某个状态\n    </p>\n    <pre class=\"line-numbers\">\n      <code class=\"language-js\">\n        computed: {\n          count() {\n            return this.store.state.count;\n          }\n        }\n      </code>\n    </pre>\n    <p class=\"v-note\">辅助函数mapState</p>\n    <p class=\"v-title\">\n      但是当一个组件需要获取多个状态的时候，将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题，我们可以使用mapState辅助函数帮助我们生成计算属性：\n    </p>\n    <pre class=\"line-numbers\">\n      <code class=\"language-js\">\n        computed: mapState({\n          count: state => state.count,\n          countAlias: 'count',\n          countPlusLocalState(state) {\n            return state.count + this.localCount;\n          }\n        }),\n        data() {\n          return {\n            localCount: 2\n          }\n        }\n      </code>\n    </pre>\n    <p class=\"v-txt\">\n      从上面代码我们可以看到，计算属性等于mapState函数，而mapState函数接受一个Object为参数，而这个参数里有三个属性，现在来分析这三个属性：\n    </p>\n    <p class=\"v-txt\">\n      a> count: state => state.count\n    </p>\n    <pre class=\"line-numbers\">\n      <code class=\"language-js\">\n        computed: mapState({\n          count: state => state.count\n        })\n      </code>\n    </pre>\n    <p class=\"v-txt\">\n      其实，上面的代码等于下面的代码，箭头函数是为了代码的整洁性。\n    </p>\n    <pre class=\"line-numbers\">\n      <code class=\"language-js\">\n        compute: {\n          count() {\n            return this.$store.state.count;\n          }\n        }\n      </code>\n    </pre>\n    <p class=\"v-txt\">\n      b> countAlias: 'count'\n    </p>\n    <p class=\"v-txt\">\n      这个属性和上面count的箭头函数属性是等价的，countAlias的值是state的一个状态属性（此时，取的是count）。所以，count和countAlias这两个属性只需要一个就可以了。\n    </p>\n    <p class=\"v-txt\">\n      c> countPlusLocalState(state) { return state.count + this.localCount; }\n    </p>\n    <p class=\"v-txt\">\n      至于第三条属性其实和上面两条属性也是一样的，只不过是采取了常规函数的写法，而不是箭头函数，是因为countPlusLocalState这个计算属性还要取data里面return出来的localCount值，所以必须用到this，所以只能采取常规函数写法而不是箭头函数。\n    </p>\n    <p class=\"v-note\">注意</p>\n    <p class=\"v-title\">当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 mapState 传一个字符串数组。</p>\n    <pre class=\"line-numbers\">\n      <code class=\"language-js\">\n        computed: mapState([\n          'status'\n        ])\n      </code>\n    </pre>\n    <p class=\"v-note\">\n      对象展开运算符\n    </p>\n    <p class=\"v-txt\">\n      我们知道，计算属性是一个对象，而mapState返回的也是一个对象，上面的代码其实是让计算属性等于mapState返回的对象。所以，我们如何将mapState辅助函数与其它计算属性混合使用。这时就用到了对象展开运算符：\n    </p>\n    <pre class=\"line-numbers\">\n      <code class=\"language-js\">\n        computed: {\n          otherComputed() {\n            return this.localCount;\n          },\n          ...mapState([\n            'count'\n          ])\n        },\n        data() {\n          return {\n            localCount: 2\n          }\n        }\n      </code>\n    </pre>\n  </div>\n</template>\n\n<script>\n  import mixin from '@/mixins/prism';\n  import { mapState } from 'vuex';\n  export default {\n    name: 'vuex-core-state',\n    mixins: [mixin],\n    computed: {\n      otherComputed() {\n        return this.localCount;\n      },\n      ...mapState([\n        'count'\n      ])\n    },\n    data() {\n      return {\n        localCount: 2\n      }\n    },\n    methods: {\n      addCount() {\n        console.log(this.status);\n      }\n    }\n  }\n</script>\n\n\n\n// WEBPACK FOOTER //\n// src/views/workStudy/vuex/core/state/index.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"v-vuex-core-state\"},[_c('p',{staticClass:\"v-note\"},[_vm._v(\"单一状态树\")]),_vm._v(\" \"),_c('p',{staticClass:\"v-txt\"},[_vm._v(\"\\n    单一状态树即用一个对象就包含了全部的应用层级状态。所以，这个对象就作为整个应用里唯一的数据源而存在。其意义就是每个应用实例仅有一个store实例。单一状态树让我们能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照。\"),_c('b',[_vm._v(\"单状态树和模块化并不冲突。\")])]),_vm._v(\" \"),_c('p',{staticClass:\"v-note\"},[_vm._v(\"\\n    获得vuex状态\\n  \")]),_vm._v(\" \"),_c('p',{staticClass:\"v-title\"},[_vm._v(\"\\n    在vue-cli项目中，我们可以通过如下方式将vuex状态从根组件注入到每一个子组件中（通过vue的store选项），这样子组件就能通过this.$store来访问到store状态。代码如下：\\n  \")]),_vm._v(\" \"),_c('pre',{staticClass:\"line-numbers\"},[_vm._v(\"    \"),_c('code',{staticClass:\"language-js\"},[_vm._v(\"\\n      // 在上一节，已经在src目录下新建了store文件夹以及store文件夹下的一个js文件，js文件先命名为index.js文件，其内容如下\\n      import Vue from 'vue'\\n      import Vuex from 'vuex'\\n      Vue.use(Vuex)\\n      const store = new Vuex.Store({\\n        state: {\\n          count: 0\\n        },\\n        mutations: {\\n          increment(state) {\\n            state.count++\\n          }\\n        }\\n      })\\n      export default store\\n    \")]),_vm._v(\"\\n  \")]),_vm._v(\" \"),_c('p',{staticClass:\"v-txt\"},[_vm._v(\"\\n    访问store状态代码如下：\\n  \")]),_vm._v(\" \"),_c('pre',{staticClass:\"line-numbers\"},[_vm._v(\"    \"),_c('code',{staticClass:\"language-js\"},[_vm._v(\"\\n      created() {\\n        console.log(this.$store.count) // => 0\\n      }\\n    \")]),_vm._v(\"\\n  \")]),_vm._v(\" \"),_c('p',{staticClass:\"v-title\"},[_vm._v(\"\\n    如果每次从vuex中取状态都以this.$store的方式取的话，无疑是很麻烦的。因为vuex的状态存储是响应式的，所以从stroe中读取状态最简单的方法就是在计算属性中返回某个状态\\n  \")]),_vm._v(\" \"),_c('pre',{staticClass:\"line-numbers\"},[_vm._v(\"    \"),_c('code',{staticClass:\"language-js\"},[_vm._v(\"\\n      computed: {\\n        count() {\\n          return this.store.state.count;\\n        }\\n      }\\n    \")]),_vm._v(\"\\n  \")]),_vm._v(\" \"),_c('p',{staticClass:\"v-note\"},[_vm._v(\"辅助函数mapState\")]),_vm._v(\" \"),_c('p',{staticClass:\"v-title\"},[_vm._v(\"\\n    但是当一个组件需要获取多个状态的时候，将这些状态都声明为计算属性会有些重复和冗余。为了解决这个问题，我们可以使用mapState辅助函数帮助我们生成计算属性：\\n  \")]),_vm._v(\" \"),_c('pre',{staticClass:\"line-numbers\"},[_vm._v(\"    \"),_c('code',{staticClass:\"language-js\"},[_vm._v(\"\\n      computed: mapState({\\n        count: state => state.count,\\n        countAlias: 'count',\\n        countPlusLocalState(state) {\\n          return state.count + this.localCount;\\n        }\\n      }),\\n      data() {\\n        return {\\n          localCount: 2\\n        }\\n      }\\n    \")]),_vm._v(\"\\n  \")]),_vm._v(\" \"),_c('p',{staticClass:\"v-txt\"},[_vm._v(\"\\n    从上面代码我们可以看到，计算属性等于mapState函数，而mapState函数接受一个Object为参数，而这个参数里有三个属性，现在来分析这三个属性：\\n  \")]),_vm._v(\" \"),_c('p',{staticClass:\"v-txt\"},[_vm._v(\"\\n    a> count: state => state.count\\n  \")]),_vm._v(\" \"),_c('pre',{staticClass:\"line-numbers\"},[_vm._v(\"    \"),_c('code',{staticClass:\"language-js\"},[_vm._v(\"\\n      computed: mapState({\\n        count: state => state.count\\n      })\\n    \")]),_vm._v(\"\\n  \")]),_vm._v(\" \"),_c('p',{staticClass:\"v-txt\"},[_vm._v(\"\\n    其实，上面的代码等于下面的代码，箭头函数是为了代码的整洁性。\\n  \")]),_vm._v(\" \"),_c('pre',{staticClass:\"line-numbers\"},[_vm._v(\"    \"),_c('code',{staticClass:\"language-js\"},[_vm._v(\"\\n      compute: {\\n        count() {\\n          return this.$store.state.count;\\n        }\\n      }\\n    \")]),_vm._v(\"\\n  \")]),_vm._v(\" \"),_c('p',{staticClass:\"v-txt\"},[_vm._v(\"\\n    b> countAlias: 'count'\\n  \")]),_vm._v(\" \"),_c('p',{staticClass:\"v-txt\"},[_vm._v(\"\\n    这个属性和上面count的箭头函数属性是等价的，countAlias的值是state的一个状态属性（此时，取的是count）。所以，count和countAlias这两个属性只需要一个就可以了。\\n  \")]),_vm._v(\" \"),_c('p',{staticClass:\"v-txt\"},[_vm._v(\"\\n    c> countPlusLocalState(state) { return state.count + this.localCount; }\\n  \")]),_vm._v(\" \"),_c('p',{staticClass:\"v-txt\"},[_vm._v(\"\\n    至于第三条属性其实和上面两条属性也是一样的，只不过是采取了常规函数的写法，而不是箭头函数，是因为countPlusLocalState这个计算属性还要取data里面return出来的localCount值，所以必须用到this，所以只能采取常规函数写法而不是箭头函数。\\n  \")]),_vm._v(\" \"),_c('p',{staticClass:\"v-note\"},[_vm._v(\"注意\")]),_vm._v(\" \"),_c('p',{staticClass:\"v-title\"},[_vm._v(\"当映射的计算属性的名称与 state 的子节点名称相同时，我们也可以给 mapState 传一个字符串数组。\")]),_vm._v(\" \"),_c('pre',{staticClass:\"line-numbers\"},[_vm._v(\"    \"),_c('code',{staticClass:\"language-js\"},[_vm._v(\"\\n      computed: mapState([\\n        'status'\\n      ])\\n    \")]),_vm._v(\"\\n  \")]),_vm._v(\" \"),_c('p',{staticClass:\"v-note\"},[_vm._v(\"\\n    对象展开运算符\\n  \")]),_vm._v(\" \"),_c('p',{staticClass:\"v-txt\"},[_vm._v(\"\\n    我们知道，计算属性是一个对象，而mapState返回的也是一个对象，上面的代码其实是让计算属性等于mapState返回的对象。所以，我们如何将mapState辅助函数与其它计算属性混合使用。这时就用到了对象展开运算符：\\n  \")]),_vm._v(\" \"),_c('pre',{staticClass:\"line-numbers\"},[_vm._v(\"    \"),_c('code',{staticClass:\"language-js\"},[_vm._v(\"\\n      computed: {\\n        otherComputed() {\\n          return this.localCount;\\n        },\\n        ...mapState([\\n          'count'\\n        ])\\n      },\\n      data() {\\n        return {\\n          localCount: 2\\n        }\\n      }\\n    \")]),_vm._v(\"\\n  \")])])}]\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-442cf6de\",\"hasScoped\":false,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/views/workStudy/vuex/core/state/index.vue\n// module id = null\n// module chunks = ","var normalizeComponent = require(\"!../../../../../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./index.vue\"\nimport __vue_script__ from \"!!babel-loader!../../../../../../node_modules/vue-loader/lib/selector?type=script&index=0!./index.vue\"\n/* template */\nimport __vue_template__ from \"!!../../../../../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-442cf6de\\\",\\\"hasScoped\\\":false,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../../../../../node_modules/vue-loader/lib/selector?type=template&index=0!./index.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = null\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/views/workStudy/vuex/core/state/index.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}